// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('EvolutionApp').controller('EvolutionCtrl', function($scope, utils, io, EvolutionCommons) {
    var gameData;
    $scope.phase = null;
    $scope.deck = null;
    $scope.players = [];
    $scope.players.dirty = 0;
    $scope.game = null;
    ({
      specie: {
        traits: [],
        foodEaten: 0
      }
    });
    $scope.isMyTurn = function() {
      return ($scope.ec != null) && $scope.ec.isPlayerTurn($scope.playerId);
    };
    $scope.isMyTurnAndEvolutionPhase = function() {
      return $scope.isMyTurn() && $scope.ec.game.phase === 'Evolution';
    };
    $scope.player = function() {
      var _ref;
      return (_ref = $scope.ec) != null ? _ref.player($scope.playerId) : void 0;
    };
    $scope.passPhaseEvolution = function() {
      console.log("pass");
      return io.emit('pass phase evolution', {});
    };
    $scope.endTurnEvolution = function(cardIndex, specieIndex) {
      console.log("next player");
      console.log(cardIndex);
      return io.emit('end turn evolution', {
        cardIndex: cardIndex,
        specieIndex: specieIndex
      });
    };
    $scope.selectedCard = function() {
      var card, i, _i, _len, _ref;
      _ref = $scope.ec.currentPlayer().hand;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        card = _ref[i];
        if (card.selected) {
          return i;
        }
      }
    };
    $scope.selectCard = function(cardIndex) {
      var card, _ref;
      if (!$scope.isMyTurn()) {
        return;
      }
      if ((_ref = $scope.ec.card($scope.selectedCard())) != null) {
        _ref.selected = false;
      }
      card = $scope.ec.card(cardIndex);
      card.selected = true;
      return $scope.checkCompatibleEvolution(card);
    };
    $scope.feedSpecie = function(specieIndex) {
      $scope.ec.feedSpecie(specieIndex);
      emit("end turn food", {
        specieIndex: specieIndex
      });
    };
    $scope.useTrait = function(specie, specieIndex, trait, traitIndex) {
      emit("end turn food", {
        specieIndex: specieIndex,
        traitIndex: traitIndex
      });
    };
    $scope.checkCompatibleEvolution = function(card) {
      var specie, _i, _len, _ref, _results;
      _ref = $scope.player().species;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        specie = _ref[_i];
        _results.push(specie.compatible = $scope.ec.isCompatibleEvolution(specie, card));
      }
      return _results;
    };
    $scope.clearCompatible = function(card) {
      var specie, _i, _len, _ref, _results;
      _ref = $scope.ec.currentPlayer().species;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        specie = _ref[_i];
        _results.push(specie.compatible = false);
      }
      return _results;
    };
    $scope.selectSpecieEvolution = function(specieIndex) {
      var cardIndex;
      if ($scope.ec.specie(specieIndex).compatible) {
        cardIndex = $scope.selectedCard();
        $scope.ec.addTrait(specieIndex, cardIndex);
        $scope.clearCompatible();
        $scope.endTurnEvolution(cardIndex, specieIndex);
      }
    };
    $scope.selectSpecie = function(specieIndex) {
      if (!$scope.isMyTurn()) {
        return;
      }
      switch ($scope.ec.game.phase) {
        case 'Evolution':
          $scope.selectSpecieEvolution(specieIndex);
          break;
        case 'Food':
          $scope.selectSpecieFood(specieIndex);
      }
    };
    $scope.currentPlayerClass = function(id) {
      var result;
      result = '';
      if (id === $scope.ec.currentPlayerId()) {
        result += 'currentPlayer';
      }
      if (id > $scope.playerId) {
        result += ' flex_order-1';
      }
      if ($scope.ec.players()[id].finished) {
        result += ' finished';
      }
      return result;
    };
    io.on("get id", function(data) {
      return localStorage;
    });
    io.on("game loaded", function(data) {
      $scope.ec = new EvolutionCommons(data.game);
      console.log("Game: " + data.gameId + ", player: " + data.playerId);
      localStorage.setItem("playerId", data.playerId);
      localStorage.setItem("gameId", data.gameId);
      $scope.playerId = data.playerId;
      $scope.$apply();
    });
    io.on("next player evolution", function(data) {
      var player, previousPlayerId;
      previousPlayerId = $scope.ec.currentPlayerId();
      $scope.ec.nextPlayer();
      if (previousPlayerId !== $scope.playerId) {
        player = $scope.ec.players()[previousPlayerId];
        player.species[data.specieIndex].traits.push(data.card);
        if (player.cardNumber != null) {
          player.cardNumber--;
          if (player.cardNumber === 0) {
            player.finished = true;
          }
        }
      }
      $scope.$apply();
    });
    io.on("player passed evolution", function(data) {
      $scope.ec.playerPassedEvolution();
      $scope.$apply();
    });
    io.on("next player food", function(data) {
      var player;
      if (data.previousPlayerId !== $scope.playerId) {
        player = $scope.players[data.previousPlayerId];
        player.species[data.specieIndex].foodEaten++;
      }
      $scope.$apply();
    });
    io.on("phase food", function(data) {
      var player, specie, _i, _j, _len, _len1, _ref, _ref1;
      $scope.game.foodAmount = data.foodAmount;
      _ref = $scope.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        player.finished = false;
      }
      _ref1 = $scope.player();
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        specie = _ref1[_j];
        $scope.checkCompatibleFood(specie);
      }
    });
    io.on("error", function(data) {
      console.log(data);
    });
    io.on("game error", function(data) {
      console.log(data);
    });
    io.on("evolution error", function(data) {
      $scope.players[data.ec.currentPlayerId()].species[data.specieId].traits.pop();
      console.log("ahah t'as perdu ta carte :D");
    });
    gameData = {
      gameId: (localStorage.gameId != null ? parseInt(localStorage.gameId) : null),
      playerId: (localStorage.playerId != null ? parseInt(localStorage.playerId) : null)
    };
    console.log(gameData);
    io.emit("load game", gameData);
  });

}).call(this);

//# sourceMappingURL=evolution.map
