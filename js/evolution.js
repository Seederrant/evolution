// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('EvolutionApp').controller('EvolutionCtrl', function($scope, utils, io) {
    var gameData;
    $scope.phase = null;
    $scope.deck = null;
    $scope.players = [];
    $scope.players.dirty = 0;
    $scope.currentPlayerId = 0;
    $scope.game = null;
    $scope.isMyTurn = function() {
      return ($scope.game != null) && $scope.currentPlayerId === $scope.playerId;
    };
    $scope.player = function() {
      return $scope.players[$scope.playerId];
    };
    $scope.pass = function() {
      console.log("pass");
      return io.emit('pass turn');
    };
    $scope.end = function(cardId, specieId) {
      console.log("next player");
      return io.emit('end turn', {
        cardId: cardId,
        specieId: specieId
      });
    };
    $scope.selectedCard = function() {
      var card, i, _i, _len, _ref;
      _ref = $scope.player().hand;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        card = _ref[i];
        if (card.selected) {
          return {
            card: card,
            id: i
          };
        }
      }
    };
    $scope.selectCard = function(card) {
      var _ref;
      if (!$scope.isMyTurn()) {
        return;
      }
      if ((_ref = $scope.selectedCard()) != null) {
        _ref.selected = false;
      }
      card.selected = true;
      return $scope.checkCompatible(card);
    };
    $scope.checkCompatible = function(card) {
      var specie, _i, _len, _ref, _results;
      _ref = $scope.player().species;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        specie = _ref[_i];
        specie.compatible = false;
        _results.push(specie.compatible = true);
      }
      return _results;
    };
    $scope.selectSpecie = function(specie, specieId) {
      var cardData;
      if (!$scope.isMyTurn()) {
        return;
      }
      if (specie.compatible) {
        cardData = $scope.selectedCard();
        $scope.player().hand.remove(cardData.card);
        specie.push(cardData.card);
        return $scope.end(cardData.id, specieId);
      }
    };
    $scope.currentPlayerClass = function(id) {
      var result;
      result = '';
      if (id === $scope.currentPlayerId) {
        result += 'currentPlayer';
      }
      if (id > $scope.playerId) {
        result += ' flex_order-1';
      }
      if ($scope.players[id].finished) {
        result += ' finished';
      }
      return result;
    };
    io.on("get id", function(data) {
      return localStorage;
    });
    io.on("game loaded", function(data) {
      console.log("Game: " + data.gameId + ", player: " + data.playerId);
      localStorage.setItem("playerId", data.playerId);
      localStorage.setItem("gameId", data.gameId);
      $scope.playerId = data.playerId;
      $scope.phase = data.game.phase;
      $scope.deck = data.game.deck;
      $scope.players = data.game.players;
      $scope.game = data.game;
      $scope.currentPlayerId = data.game.currentPlayerId;
      $scope.$apply();
    });
    io.on("next player", function(data) {
      var player;
      if (data.previousPlayerId !== $scope.playerId) {
        player = $scope.players[data.previousPlayerId];
        if (player.cardNumber != null) {
          player.cardNumber--;
          if (player.cardNumber === 0) {
            player.finished = true;
          }
        }
        player.species[data.specieId].push(data.card.card);
      } else {
        if (player.hand.length === 0) {
          player.finished = true;
        }
      }
      $scope.currentPlayerId = data.currentPlayerId;
      $scope.$apply();
    });
    io.on("player passed", function(data) {
      $scope.players[data.previousPlayerId].finished = true;
      $scope.currentPlayerId = data.currentPlayerId;
      player.finished = true;
      $scope.$apply();
    });
    io.on("error", function(data) {
      console.log(data);
    });
    io.on("game error", function(data) {
      console.log(data);
    });
    io.on("evolution error", function(data) {
      $scope.players[data.currentPlayerId].species[data.specieId].pop();
      console.log("ahah t'as perdu ta carte :D");
    });
    gameData = {
      gameId: (localStorage.gameId != null ? parseInt(localStorage.gameId) : null),
      playerId: (localStorage.playerId != null ? parseInt(localStorage.playerId) : null)
    };
    console.log(gameData);
    io.emit("load game", gameData);
  });

}).call(this);

//# sourceMappingURL=evolution.map
